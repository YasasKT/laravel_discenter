"use client";

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import "@fortawesome/fontawesome-svg-core/styles.css";
import { config } from "@fortawesome/fontawesome-svg-core";
import Sidebar from "@/components/sidebar";
import Header from "@/components/header";
import Footer from "@/components/footer";
import React, { ReactNode, useEffect, useState } from "react";
import { usePathname } from "next/navigation";
import AdminSidebar from "@/components/adminSidebar";
import TopSection from "@/components/AdminTopSection";
import { TopSectionProps } from '@/components/AdminTopSection';
import PopupNew from "@/components/PopupAddNew";
import { title } from "process";

config.autoAddCss = false;

const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

interface LayoutProps {
  children: React.ReactNode;
}

export default function RootLayout({ children }: LayoutProps) {

  const [sidebarOpen, setSidebarOpen] = useState(false);
  const pathname = usePathname();

  useEffect(() => {
    console.log("Current route:", pathname);
  }, [pathname]);

  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen);
  };

  useEffect(() => {
    const handleResize = () => {
      // Close sidebar on smaller screens
      if (window.innerWidth <= 768) {
        setSidebarOpen(false);
      } else {
        setSidebarOpen(true);
      }
    };

    window.addEventListener('resize', handleResize);
    handleResize(); // Call once to set initial state

    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  const isAdminRoute = pathname.startsWith("/admin");

  
let topSectionProps: TopSectionProps = {
  title: "Dashboard",
};

if (pathname === "/admin/brands") {
  topSectionProps = {
    ...topSectionProps,
    title: "Product Variants",
  };
} else if (pathname === "/admin/products") {
  topSectionProps = {
    ...topSectionProps,
    title: "Products",
  };
} else if (pathname === "/admin/orders") {
  topSectionProps = {
    ...topSectionProps,
    title: "Orders",
  };
} else if (pathname === "/admin/colors") {
  topSectionProps = {
    ...topSectionProps,
    title: "Product Variants",
  };
} else if (pathname === "/admin/units") {
  topSectionProps = {
    ...topSectionProps,
      title: "Product Variants",
  };
} else if (pathname === "/admin/sizes") {
  topSectionProps = {
    ...topSectionProps,
    title: "Product Variants",
  };
} else if (pathname === "/admin/categories") {
  topSectionProps = {
    ...topSectionProps,
    title: "Product Management",
  };
} else if (pathname === "/admin/sub-categories") {
  topSectionProps = {
    ...topSectionProps,
    title: "Product Management",
  };
} else if (pathname === "/admin/add-product") {
  topSectionProps = {
    ...topSectionProps,
    title: "Product Management",    
  };
}

  return isAdminRoute ? (
    <html lang="en">
      <body className={inter.className}>
        <div className="admin-layout">
        <AdminSidebar sidebarOpen={sidebarOpen} toggleSidebar={toggleSidebar} />
          <div className={`admin-content ${sidebarOpen ? "shifted" : ""}`}>
            <main>
            <TopSection
                title={topSectionProps.title}
                toggleSidebar={toggleSidebar}
                isLayoutShifted={sidebarOpen}
              />
              {children}
            </main>
          </div>
        </div>
      </body>
    </html>
  ) : (
    <html lang="en">
      <body className={inter.className}>
        <Sidebar sidebarOpen={sidebarOpen} toggleSidebar={toggleSidebar} />
        <div className="page-content">
          <Header toggleSidebar={toggleSidebar} />
          <main className="main-content">{children}</main>
          <Footer />
        </div>
      </body>
    </html>
  );
}
